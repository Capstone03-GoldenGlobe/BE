# main 브랜치에 push 혹은 pull request가 발생한 경우 동작하도록 설정
name: Java CI/CD with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  # 어플리케이션 빌드 - docker hub에 푸시 - EC2 서버 배포
  build-docker-image:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    # 1. Java 17세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # application.properties 설정
    - name: Setting application.properties
      run: | 
        touch ./src/main/resources/application.properties
        echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties

    # 2. Spring Boot 애플리케이션 빌드
    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: clean bootJar

    # 3. Docker 이미지 빌드
    - name: docker image build
      run: docker build -t ${{ secrets.DOCKER_USERNAME }}/goldenglobe-server .

    # 4. DockerHub 로그인
    - name: docker login
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # 5. Docker Hub 이미지 푸시
    - name: docker Hub push
      run: docker push ${{ secrets.DOCKER_USERNAME }}/goldenglobe-server

    # 6. SSH 접속 - Docker 이미지 pull - 배포
    - name: deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ubuntu
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/goldenglobe-server
          docker stop goldenglobe-container || true
          docker rm goldenglobe-container || true
          docker run -d --name goldenglobe-container -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/goldenglobe-server
